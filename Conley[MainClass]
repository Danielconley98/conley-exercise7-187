//AUTHOR: Daniel Conley
//COURSE: CPT187
//CREATE DATE: 4/27/2022
//PURPOSE: The purpose of this program, in full detail, would be to take the information of it's Order, and apply it to the menus, allowing the user to purchase items.

//Declaring Package
package edu.cpt187.conley.exercise6;

//Importing Scanner
import java.util.Scanner;

//Declaring Main Class
public class MainClass
{

	//Declaring all Class Constants
	public final static char[] MENU_CHARS = {'A', 'B', 'Q'};                                 				      //Setting Menu characters
	public final static String[] MENU_OPTIONS = {"Login", "Create an Account", "Quit"};     					  //Giving create/quit options
	public final static char[] SUB_MENU_CHARS = {'A', 'B', 'C', 'D'};                           				  //Listing available characters
	public final static String[] FILE_MENU_OPTIONS = {"Load Inventory", "Create Order", "Return to Main Menu"};   //Options ofr the file Menu options
	public final static char[] FILE_MENU_CHARS = {'A', 'B', 'R'};												  //Options for the file menu chars
	public final static String INVENTORY_FILE_NAME = "MasterOrderFile.dat";                  				      //The name of the master Inventory file
	public final static String ACCOUNTS_FILE_NAME = "MasterUserFile.dat";                     				      //The name of the master account file

	public static void main(String[] args)
	{
		// TODO Auto-generated method stub

		//Declaring current order
		Order currentOrder = new Order();
		//Declaring current Inventory
		Inventory currentInventory = new Inventory();
		//Declaring current Write Order
		WriteOrder orders = new WriteOrder(INVENTORY_FILE_NAME);
		//Declaring current UserAccounts
		UserAccounts currentUser = new UserAccounts(ACCOUNTS_FILE_NAME);
		//Initializing Scanner
		Scanner input = new Scanner(System.in);

		String userName = " ";       //The User's Name
		char menuSelection = ' ';    //The User's Selection

		//DISPLAY WELCOME BANNER
		displayWelcomeBanner();

		//Getting Menu Selection
		menuSelection = validateMenuSelection(input);

		//Run-while
		while (menuSelection != 'Q')
		{
			currentUser.setUserAccountArrays();
			userName = getUserName(input);
			//If Statement
			if (menuSelection != 'A')
			{
				currentUser.setSearchedIndex(userName);
				//If statement
				if (currentUser.getSearchedIndex() >= 0)
				{
					displayAccountResults(userName);
				}//End of if
				//Else statement
				else
				{
					currentUser.setWriteOneRecord(userName, getPassword(input));
					displayAccountResults();
				}//End of Else
			}//End of if
			//Else statement
			else
			{
				currentUser.setSearchedIndex(userName, getPassword(input));
				//If statement
				if (currentUser.getSearchedIndex() < 0)
				{
					displayLoginError();
				}//End of if
				//Else statement
				else
				{
					menuSelection = validateFileSelection(input);
					//While statement
					while (menuSelection != 'R')
					{
						//If statement
						if (menuSelection == 'A')
						{
							currentInventory.setLoadItems(getFileName(input));
							//If statement
							if (currentInventory.getRecordCount() <= 0)
							{
								displayFileError();
							}//End of if
							//Else statement
							else
							{
								displayRecordReport(currentInventory.getRecordCount());
							}//End of else
						}//End of if
						//Else statement
						else
						{
							currentInventory.setSearchIndex(validateSearchValue(input));
							//If statement
							if (currentInventory.getItemSearchIndex() < 0)
							{
								displayNotFound();
							}//End of if
							//Else statement
							else
							{
								currentOrder.setLastItemSelectedIndex(currentInventory.getItemSearchIndex());
								currentOrder.setItemID(currentInventory.getItemIDs());
								currentOrder.setItemPrice(currentInventory.getItemPrices());
								currentOrder.setItemName(currentInventory.getItemNames());
								currentOrder.setHowMany(validateHowMany(input));
								if (currentOrder.getInStockCount(currentInventory.getInStockCounts())< currentOrder.getHowMany())
								{
									displayOutOfStock();
								}//End of if
								//Else statement
								else
								{
									currentOrder.setDiscountType(validateDiscountMenu(input, 
									currentInventory.getDiscountNames(),currentInventory.getDiscountRates()));
									currentOrder.setDiscountName(currentInventory.getDiscountNames());
									currentOrder.setDiscountRate(currentInventory.getDiscountRates());
									currentOrder.setDecreaseInStock(currentInventory);
									currentOrder.setPrizeName(currentInventory.getPrizeNames(),currentInventory.getRandomNumber());
									orders.setWriteOrder(currentOrder.getItemID(),currentOrder.getItemName(), currentOrder.getItemPrice(), 
									currentOrder.getHowMany(), currentOrder.getTotalCost());
									//If statement
									if (currentOrder.getDiscountRate() > 0.0)
									{
										displayOrderReport(userName,currentOrder.getItemName(),currentOrder.getItemPrice(), 
												currentOrder.getHowMany(),currentOrder.getDiscountName(), currentOrder.getDiscountRate(), 
												currentOrder.getDiscountAmt(), currentOrder.getDiscountPrice(),currentOrder.getSubTotal(), 
												currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(), 
												currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									}//End of if
									//Else statement
									else
									{
										displayOrderReport(userName,currentOrder.getItemName(),currentOrder.getItemPrice(), 
												currentOrder.getHowMany(), currentOrder.getSubTotal(), currentOrder.getTaxRate(),currentOrder.getTaxAmt(), 
												currentOrder.getTotalCost(), currentOrder.getPrizeName(),currentOrder.getInStockCount(
												currentInventory.getInStockCounts()));
									}//End of Else

								}//End of Else

							}//End of Else
						}//End of Else
						menuSelection = validateFileSelection(input);
					}//End of while
				}//End of else
			}//End of Else
			menuSelection = validateMenuSelection(input);

		}//End of While
		currentInventory.setLoadItems (orders.getFileName(),orders.getRecordCount());
		//If statement
		if (orders.getRecordCount() > 0)
		{
			displayFinalReport(currentInventory.getItemIDs(), currentInventory.getItemNames(), 
					currentInventory.getItemPrices(), currentInventory.getOrderQuantities(), 
					currentInventory.getOrderTotals(), currentInventory.getRecordCount(), 
					currentInventory.getGrandTotal());
		}//End of if
		displayFarewellMessage();
		//Closing Scanner
		input.close();

	}//End of Main Method


	//VOID METHODS
	//Display login error void method
	private static void displayLoginError() 
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("LOGIN ERROR");
		System.out.println("Username and/or Password is incorrect");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");

	}//End of void Method

	//Void method display accont results
	private static void displayAccountResults()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ACCOUNT RESULTS");
		System.out.println("New accounted created");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//End of void method
	//Void Method display account results
	private static void displayAccountResults(String userName)
	{

		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ACCOUNT RESULTS");
		System.out.println("Account not created: username, " + userName + ", already exists.");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");

	}//End of void method


	//Welcome Banner Void Method
	public static void displayWelcomeBanner()
	{

		System.out.println("Welcome to conleyexercise6");
		System.out.println("Here, you will be able to purchase your Sod!");
		System.out.println("The purpose of this program, in full detail,");
		System.out.println("would be to take the information of it's Order,");
		System.out.println("and apply it to the menus,");
		System.out.println("allowing the user to purchase items.");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//End of Void Method (WELCOME BANNER)

	//Farewell Message Void Method
	public  static void displayFarewellMessage()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("Thank you for using my program!");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//End of Void Method (FAREWELL MESSAGE)

	//Display Main Menu Void Method
	public static void displayMainMenu()
	{
		//Declaring Local Variables
		final String MAIN_MENU_TITLE = "MAIN MENU";
		int localIndex = 0;
		//Menu Title
		System.out.println("---------------------------------------------------");
		System.out.println(MAIN_MENU_TITLE);
		System.out.println("---------------------------------------------------");
		//displaying menu options
		//While Method
		while (localIndex < MENU_OPTIONS.length)
		{
			System.out.printf("%-3s%-4s%-4s\n", MENU_CHARS[localIndex],"for", MENU_OPTIONS[localIndex]);
			localIndex++;
		}//End of print Loop
		//Menu Prompt
		System.out.print("\nEnter selection here: ");

	}//End of Void Method (MAIN MENU)
	
	//Display File Menu Void Method
		public static void displayFileMenu()
		{
			//Declaring Local Variables
			final String FILE_MENU_TITLE = "FILE MENU";
			int localIndex = 0;
			//Menu Title
			System.out.println("---------------------------------------------------");
			System.out.println(FILE_MENU_TITLE);
			System.out.println("---------------------------------------------------");
			//displaying menu options
			//While method
			while (localIndex < FILE_MENU_OPTIONS.length)
			{
				System.out.printf("%-3s%-4s%-4s\n", FILE_MENU_CHARS[localIndex],"for", FILE_MENU_OPTIONS[localIndex]);
				localIndex++;
			}//End of print Loop
			//Menu Prompt
			System.out.print("\nEnter selection here: ");
		}//End of void method(DISPLAY FILE MENU)

	//Displaying Out of Stock Report
	public  static void displayOutOfStock()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("OUT OF STOCK ERROR");
		System.out.println("The quantity entered is greater than the quanitity in stock");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//End of Void Method (OUT OF STOCK)


	public  static void displayNotFound()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("NOT FOUND ERROR");
		System.out.println("The search value entered was not Found");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//End of Void Method (OUT OF STOCK)

	public  static void displayFileError()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FILE ERROR");
		System.out.println("The file named was not found or could not be opened");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//End of Void Method (OUT OF STOCK)

	public  static void displayRecordReport(int borrowedRecordCount)
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("RECORD REPORT");
		System.out.println(borrowedRecordCount + " records processed");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//End of Void Method (OUT OF STOCK)

	public  static void displaySearchValue()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter the search value:");

	}//End of Void Method (OUT OF STOCK)



	//Discount Menu 
	public static void displayDiscountMenu(String[] borrowedDiscountNames, double[] borrowedDiscountRates) {

		//Declaring Local Variables
		final String DISCOUNT_MENU_TITLE = "DISCOUNT MENU";
		int localIndex = 0;
		//Menu Title
		System.out.println("---------------------------------------------------");
		System.out.println(DISCOUNT_MENU_TITLE);
		System.out.println("---------------------------------------------------");

		//displaying menu options
		while (localIndex < borrowedDiscountNames.length)
		{
			System.out.printf("%-2s%-4s%-20s%s%s\n", SUB_MENU_CHARS[localIndex], "For", borrowedDiscountNames[localIndex],
					borrowedDiscountRates[localIndex]*100, "%");
			localIndex++;
		}//End of print Loop
		//Menu Prompt
		System.out.print("\nEnter selection here: ");

	}//End of Void Method (DISCOUNT MENU)

	//Overloaded Order Report
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice,
			int borrowedHowMany,  double borrowedSubTotal,double borrowedTaxRate, double borrowedTaxAmt,
			double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCounts)
	{

		System.out.println("---------------------------------------------------");
		System.out.println("ORDER REPORT");
		System.out.println("---------------------------------------------------");

		System.out.printf("%-1s%9s\n", "Customer Name:", borrowedUserName);

		System.out.println(" ");

		System.out.printf("%-1s%13s\n", "Item Name:", borrowedItemName);
		System.out.printf("%-1s%5s%.2f\n", "Item Price:", "$", borrowedItemPrice);

		System.out.println(" ");

		System.out.printf("%-1s%9d\n", "Quantity", borrowedHowMany);

		System.out.println(" ");

		System.out.printf("%-1s%7s%.2f\n", "Subtotal:", "$", borrowedSubTotal);
		System.out.printf("%-1s%11.2f%s\n", "Tax Rate:", borrowedTaxRate*100, "%");
		System.out.printf("%-1s%5s%.2f\n", "Tax Amount:", "$", borrowedTaxAmt);

		System.out.println(" ");

		System.out.printf("%-1s%4s%.2f\n", "Order Total:", "$", borrowedTotalCost);

		System.out.println(" ");

		System.out.printf("%-1s%16s\n", "Prize:", borrowedPrizeName);

		System.out.println(" ");

		System.out.println("Buy more now: Only ["+borrowedInStockCounts+"] left in stock!");


	}//End of Void Method (ORDER REPORT)

	//Order Report
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, 
			String borrowedDiscountName, double borrowedDiscountRate, double borrowedDiscountAmt, double borrowedDiscountPrice,
			double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost,
			String borrowedPrizeName, int borrowedInStockCounts)
	{

		System.out.println("---------------------------------------------------");
		System.out.println("ORDER REPORT");
		System.out.println("---------------------------------------------------");

		System.out.printf("%-1s%9s\n", "Customer Name:", borrowedUserName);

		System.out.println(" ");

		System.out.printf("%-1s%13s\n", "Item Name:", borrowedItemName);
		System.out.printf("%-1s%5s%.2f\n", "Item Price:", "$", borrowedItemPrice);

		System.out.println(" ");

		System.out.printf("%-1s%12s\n", "Discount Name:", borrowedDiscountName);
		System.out.printf("%-1s%6.2f%s\n", "Discount Rate:", borrowedDiscountRate*100, "%");
		System.out.printf("%-1s%1s%.2f\n", "Discount Amount:", "$", borrowedDiscountAmt);
		System.out.printf("%-1s%1s%.2f\n", "Discount Price:", "$", borrowedDiscountPrice);

		System.out.println(" ");

		System.out.printf("%-1s%9d\n", "Quantity", borrowedHowMany);

		System.out.println(" ");

		System.out.printf("%-1s%7s%.2f\n", "Subtotal:", "$", borrowedSubTotal);
		System.out.printf("%-1s%11.2f%s\n", "Tax Rate:", borrowedTaxRate*100, "%");
		System.out.printf("%-1s%5s%.2f\n", "Tax Amount:", "$", borrowedTaxAmt);

		System.out.println(" ");

		System.out.printf("%-1s%4s%.2f\n", "Order Total:", "$", borrowedTotalCost);

		System.out.println(" ");

		System.out.printf("%-1s%16s\n", "Prize:", borrowedPrizeName);

		System.out.println(" ");

		System.out.println("Buy more now: Only ["+borrowedInStockCounts+"] left in stock!");



	}//End of Void Method (ORDER REPORT)


	//Final Report
	public static void displayFinalReport(int[] borrowedItemIDs, String[] borrowedItemNames, double[] borrowedItemPrices,int[] borrowedOrderQuantities,
			double[] borrowedOrderTotals, int borrowedRecordCount, double borrowedGrandTotal)
	{

		//Declaring Local Variables
		final String FINAL_REPORT_TITLE = "FINAL REPORT";
		String[] subjectMenu = {"ID", "NAME", "PRICE", "QTY", "TOTAL", "GRAND TOTAL"};

		//Menu Title
		System.out.println("---------------------------------------------------");
		System.out.println(FINAL_REPORT_TITLE);
		System.out.println("---------------------------------------------------");
		
		//displaying Results		  	
		System.out.printf("%-10s%-10s%-15s%-15s%-15s\n", subjectMenu[0],subjectMenu[1], subjectMenu[2], subjectMenu[3], subjectMenu[4]);
		System.out.printf("%-10d%-10s%-15.2f%-15d%-15.2f\n", borrowedItemIDs[1],borrowedItemNames[1],borrowedItemPrices[1], borrowedOrderQuantities[1], borrowedOrderTotals[1]);
		System.out.println(" ");
		System.out.printf("%-10s\n", subjectMenu[5]);
		System.out.printf("%-10.2f\n", borrowedGrandTotal);
		
	}//End of Void Method (FINAL REPORT)

	//End of VOID METHODS

	//VR METHODS

	//Get User Name
	public static String getUserName(Scanner borrowedInput)
	{

		String localUserName = "";

		//prompts user for name
		System.out.print("Enter your Username:");
		//assignment statement
		localUserName = borrowedInput.next().toString();

		return localUserName;
	}//End of VR Method (GET USER NAME)


	public static String getPassword(Scanner borrowedInput)
	{

		String localPassword = "";

		//prompts user for name
		System.out.print("Enter Password:");
		//assignment statement
		localPassword = borrowedInput.next().toString();

		return localPassword;
	}//End of VR Method (GET USER NAME)

	public static String getFileName(Scanner borrowedInput)
	{
		String localFileName = "";

		System.out.println("---------------------------------------------------");
		//Prompts user for File Name
		System.out.print("Enter the file name with extension (i.e. file.txt)");
		//Assignment Statement
		localFileName = borrowedInput.next().toString();

		return localFileName;

	}//End of VR Method (Get File Name)


	//Validate Main Menu
	public static char validateMenuSelection(Scanner borrowedInput)
	{
		char localSelection = ' ';

		displayMainMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		//Validation Loop
		while (localSelection != MENU_CHARS[0] && localSelection != MENU_CHARS[1] && localSelection != MENU_CHARS[2])
		{
			System.out.println("~~~ERROR: Invalid Selection.~~~~");
			displayMainMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//End of Loop
		return localSelection;
	}//End VR method (Validate Main Menu)

	public static String validateSearchValue(Scanner borrowedInput)
	{
		int localSearchValue = 0;
		System.out.print("Enter the search value:");
		localSearchValue = borrowedInput.nextInt();
		//Validation Loop
		while (localSearchValue <= 0 )
		{
			System.out.println("~~~~~ERROR: Invalid Value~~~~~");
			System.out.print("Enter the search value:");
			localSearchValue = borrowedInput.nextInt();

		}//End of Validation Loop
		return String.valueOf(localSearchValue);

	}//End of VR method (ValidateSearchValue)



	//Validate How Many
	public static int validateHowMany(Scanner borrowedInput)
	{
		int localHowMany = 0;
		System.out.print("Please enter a quantity");
		localHowMany = borrowedInput.nextInt();
		//Validation Loop
		while (localHowMany <= 0 )
		{
			System.out.println("~~~~~ERROR: Invalid quantity~~~~~");
			System.out.print("Please enter a quantity");
			localHowMany = borrowedInput.nextInt();

		}//End of Validation Loop
		return localHowMany;
	}//End of VR method (Validate How Many)

	public static char validateFileSelection(Scanner borrowedInput)
	{
		char localSelection = ' ';

		displayFileMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		//Validation Loop
		while (localSelection != FILE_MENU_CHARS[0] && localSelection != FILE_MENU_CHARS[1] && localSelection != FILE_MENU_CHARS[2])
		{
			System.out.println("~~~ERROR: Invalid Selection.~~~~");
			displayFileMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//End of Loop
		return localSelection;
	}//End VR method (Validate File Menu)



	//Validate Discount Menu
	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames,
			double [] borrowedDiscountRates)
	{
		char localSelection = ' ';
		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		//Validation Loop
		while(localSelection!= SUB_MENU_CHARS[0] && localSelection != SUB_MENU_CHARS[1]
				&& localSelection!= SUB_MENU_CHARS[2] && localSelection != SUB_MENU_CHARS[3])
		{

			System.out.println("~~~~~ERROR: Invalid Selection~~~~~");
			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//END OF VALIDATION LOOP
		return localSelection;
	}//End of VR Method (Validate Discount Menu)
}//End of Class
